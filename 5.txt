import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler 
  
X, y = load_iris(return_X_y=True)
X, y = X[:, :2], (y != 0).astype(int)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=9)
X_train_std = StandardScaler().fit_transform(X_train)
X_test_std = StandardScaler().fit_transform(X_test)

def sigmoid(z):
    return 1 / (1 + np.exp(-z))
def logistic_regression(X, y):
    weights = np.zeros(X.shape[1])
    for _ in range(200):
        weights -= 0.01 * np.dot(X.T, sigmoid(np.dot(X, weights)) - y) / len(y)
    return weights

weights = logistic_regression(X_train_std, y_train)

y_pred = sigmoid(np.dot(X_test_std, weights)) > 0.5
accuracy = np.mean(y_pred == y_test)
print(f'Accuracy: {accuracy:.4f}')

xx, yy = np.meshgrid(np.arange(X_train_std[:, 0].min()-1, X_train_std[:, 0].max()+1, 0.1),
                     np.arange(X_train_std[:, 1].min()-1, X_train_std[:, 1].max()+1, 0.1))

Z = sigmoid(np.dot(np.c_[xx.ravel(), yy.ravel()], weights)).reshape(xx.shape) > 0.5

plt.contourf(xx, yy, Z, alpha=0.4)
plt.scatter(X_train_std[:, 0], X_train_std[:, 1], c=y_train)
plt.title('Logistic Regression Decision Boundaries')
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.show()