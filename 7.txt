import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from collections import Counter

iris = load_iris()
X, y = iris.data, iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

class KNN:
    def __init__(self, k=3):
        self.k = k
    def fit(self, X, y):
        self.X_train = X
        self.y_train = y
    def predict(self, x):
        distances = [np.linalg.norm(x - inst) for inst in self.X_train]
        k_indices = np.argsort(distances)[:self.k]
        k_labels = [self.y_train[i] for i in k_indices]
        self.ctr = Counter(k_labels)
        return self.ctr.most_common(1)[0][0]
    def _predict(self, X):
        return [self.predict(inst) for inst in X]

knn = KNN(k=3)
knn.fit(X_train, y_train)

y_pred = knn._predict(X_test)
accuracy = np.mean(y_pred == y_test)
print(f"The accuracy is {accuracy:.4f}")

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix Heatmap")
plt.show()